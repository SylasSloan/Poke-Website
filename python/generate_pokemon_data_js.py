import argparse
import json
import os
import sys


def generate(in_path: str, out_path: str):
    if not os.path.exists(in_path):
        print(f"[Error] Input JSON not found: {in_path}")
        sys.exit(1)

    with open(in_path, 'r', encoding='utf-8') as f:
        data = json.load(f)

    if not isinstance(data, list):
        print('[Error] Expected a JSON array at the root of the input JSON')
        sys.exit(2)

    # Minify JSON to keep the JS file smaller
    json_text = json.dumps(data, ensure_ascii=False, separators=(',', ':'))

    # Escape any backticks in the JSON so it can be safely embedded in a template literal
    safe_json = json_text.replace('`', '\\`')

    js_content = (
        '// Auto-generated by python/generate_pokemon_data_js.py — do not edit manually.\n'
        "// This file assigns window.ALL_POKEMON and calls window.onAllPokemonLoaded() if present.\n"
        '(function(){\n'
        '  try {\n'
        '    window.ALL_POKEMON = JSON.parse(`' + safe_json + '`);\n'
        '    if (typeof window.onAllPokemonLoaded === "function") window.onAllPokemonLoaded(window.ALL_POKEMON);\n'
        '    console.log("Loaded local pokemon dataset. Entries:", window.ALL_POKEMON.length);\n'
        '  } catch (e) { console.error("Failed to parse embedded pokemon JSON", e); }\n'
        '})();\n'
    )

    os.makedirs(os.path.dirname(out_path), exist_ok=True)
    with open(out_path, 'w', encoding='utf-8', newline='') as f:
        f.write(js_content)

    print(f"[Done] Wrote {out_path}")
    print(f"        Pokémon count: {len(data)}")
    print(f"        Size: {len(js_content):,} bytes")


def main():
    base_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
    default_in = os.path.join(base_dir, 'json', 'pokemon-full-data.json')
    default_out = os.path.join(base_dir, 'js', 'pokemon-data-local.js')

    parser = argparse.ArgumentParser(description='Generate a safe JS dataset file for offline use (file://)')
    parser.add_argument('input_json', nargs='?', default=default_in, help='Path to input JSON (default: json/pokemon-full-data.json)')
    parser.add_argument('output_js', nargs='?', default=default_out, help='Path to output JS file (default: js/pokemon-data-local.js)')
    args = parser.parse_args()

    generate(os.path.abspath(args.input_json), os.path.abspath(args.output_js))


if __name__ == '__main__':
    main()
